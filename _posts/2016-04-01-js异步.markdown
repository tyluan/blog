---
layout:     post
title:      "js异步方法总结"
subtitle:   "异步"
date:       2016-04-01 12:00:00
author:     "jun"
header-img: "img/post-bg-re-vs-ng2.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 前端开发
    - JavaScript
    - 异步
    - promise
 
---

#JS中异步编程
> Javascript语言的执行环境是"单线程",这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。本文主要介绍es6中异步编程：Generators函数+Promise

js没有多线程的概念，只有阻塞的概念，我们说的异步，是只不阻塞后续代码。目前主要有两种编程方式回调函数和事件监听，阮一峰的[Javascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)基本是这两种。
## 一、回调函数
异步编程最基本的方法。

回调是一个函数被作为一个参数传递到另一个函数里，在那个函数执行完后再执行。不过回调并不一定就是异步。他们自己并没有直接关系。
同步回调：

	function A(callback){
	    console.log("I am A");
	    callback();  //调用该函数
	}

	function B(){
	   console.log("I am B");
	}

	A(B);

### setTimeout异步回调

函数f1,f2,f3，f1是耗时操作，f2需在f1之后执行，f3和f1,f2关系不大。

	f1();
	f2();
	f3();

上面同步操作f1会阻塞f3执行。改成setTimeout回调模式执行，例如

	function f1(n){
    	if(n==1||n==2){
	        return 1;
	    }
    	return f1(n-1)+f1(n-2);
	};
	function f2(){
		console.log('done')
	};
	function f3(){
		console.log('hello')
	}
	
	//回调模式
	function _f1(callback){
		setTimeout(function(){
			f1(43);
			callback();
		},1000)
	}
执行

	_f1(f2);
	f3();

###ajax异步回调
	var xhr = new XMLHttpRequest();
    xhr.open('POST', url, true);   //第三个参数决定是否采用异步的方式
    xhr.send(data);
    xhr.onreadystatechange = function(){
        if(xhr.readystate === 4 && xhr.status === 200){
                ///xxxx
        }
    }
浏览器在发起一个ajax请求，会单开一个线程（这是因为浏览器是多进程）去发起http请求，这样的话就能把这个耗时的过程单独去自己跑了，在这个线程的请求过程中，readystate 的值会有个变化的过程，每一次变化就触发一次onreadystatechange 函数，进行判断是否正确拿到返回结果。

回调函数的优点是简单，轻量级（不需要额外的库）。缺点是各个部分之间高度耦合，流程会很混乱，而且每个任务只能指定一个回调函数。某个操作需要经过多个非阻塞的IO操作，每一个结果都是通过回调，产生意大利面条式的代码

## 二、事件监听
采用事件驱动模式，任务的执行不取决于代码的顺序，而取决于某个事件是否发生。
常见的是DOM的事件绑定。

另一种也可称为事件监听的观察者模式。存在一个"信号中心"，某个任务执行完成，就向信号中心"发布"（publish）一个信号，其他任务可以向信号中心"订阅"（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做"发布/订阅模式"（publish-subscribe pattern），又称"观察者模式"。

 实现观察者模式有很多种，下面的Backbone的事件监听是体现观察者模式经典例子。一个对象可以成为发射器并派发事件，而另外的对象则监听这些事件。

	var Model = Backbone.Model.extend({});
	var View = Backbone.View.extend({});

	var model = new Model();
	View.listenTo(model,'custom_event',function(){ 
		alert('catch the event') 
	});

	model.trigger('custom_event');

## ES6中异步
> Generators函数+Promise:最强大的异步处理方式

###Promise对象
Promise是es6异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。,形式如下

	var promise = new Promise(function(resolve, reject) {
	  	$.ajax(url,function(res){
			if(res.status == 200){
				resolve(res)
			}else{
				reject(res)
			}
	});

	promise().then(function(res){
		//success
	},function(res){
		//fail
	})
有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口（then/catch/resolve/reject,），使得控制异步操作更加容易。

应用场景，例如common.js里面统一获取用数据

	getUserInfo: function() {
        var user = new Promise(function (resolve, reject) {
                service.getUser({},function (json) {
                    resolve(json.data)
                })
        });

        return user;
    }


	//调用
	common.getUserInfo().then(function (data) {
        if(data){
           //
        }
    },function(data){
		//失败处理
	})

	//或者
	common.getUserInfo().then(function (data) {
        if(data){
           //
        }
    }).catch(function(error){
		//失败处理
	})

### Generator函数
Generator函数是ES6提供的一种异步编程解决方案。从语法上，可以把它理解成一个状态机，封装了多个内部状态。形式上，Generator函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态，执行到yield就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值

	function* gen() {
		  yield 'hello';
		  yield 'world';
		  return 'ending';
		}

	var hw = gen();
调用Generator函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。此时遍历hw

	for(let i of hw){
		console.log(i)
	} //打印出 hello   word
下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止。

	hw.next()
	// { value: 'hello', done: false } done遍历是否结束
	
	hw.next()
	// { value: 'world', done: false }
	
	hw.next()
	// { value: 'ending', done: true }

其中next是可以带参数，表示上一个yield执行结果
	
	function* foo(x) {
	  var y = 2 * (yield (x + 1));
	  var z = yield (y / 3);
	  return (x + y + z);
	}
	
	var a = foo(2);
	a.next() // Object{value:3, done:false}
	a.next() // Object{value:NaN, done:false}
	a.next() // Object{value:NaN, done:true}
	
	var b = foo(2);
	b.next() // { value:3, done:false }
	b.next(3) // { value:2, done:false }y=6
	b.next(3) // { value:11, done:true }z=3 
Generator函数的暂停执行的效果，意味着可以把异步操作写在yield语句里面，等到调用next方法时再往后执行。这实际上等同于不需要写回调函数了，因为异步操作的后续操作可以放在yield语句下面，反正要等到调用next方法时再执行。所以，Generator函数的一个重要实际意义就是用来处理异步操作，改写回调函数。

	//Generator异步操作
	function* main() {
	  	var result1 = yield request('http://baidu.com');
    	var data = JSON.parse(result1);

    	var result2 = yield request('http://sina.com');
    	var resp = JSON.parse(result2);
    	console.log('The value you asked for: '+ resp.value);
	}
	
	function getJson(url) {
	  $.ajax(url, function(response){
	    it.next(response);
	  });
	}
	
	var it = main();
	it.next();//启动所有请求
上面代码的main函数，就是通过Ajax操作获取数据。可以看到，除了多了一个yield，它几乎与同步操作的写法完全一样。注意，ajax函数中必须加上response参数，因为yield语句构成的表达式，本身是没有值的，总是等于undefined。
###Generators+Promise
> 上面的方法可以适用于那些比较简单的异步generator工作流程。但是它将很快收到限制，因此我们需要一些更强大的异步机制与我们的generator来合作，这样才可以发挥出更强大的功能。
> 
> 1.没有明确的方法来处理请求error。我们都知道，Ajax请求有时是会失败的，这时我们需要使用generator中的 it.throw(...) ,同时还需要使用 try...catch 来处理请求错误时的逻辑。但是这更多是一些在后台（我们那些在iterator中的代码）手动的工作。我需要一些可以服用的方法，放在我们自己代码的generator中。
> 
>2.假如 getJson(..) 这段代码不在我们的控制下了，或者他需要多次调用回调，又或者它同时返回success与error，等等。这时我们的generator的会变得乱七八糟（返回error实现，出现异常值，等等）。控制以及防止发生这类问题是需要花费大量的手工时间的，而且一点也不能即插即用。
>
>3.通常我需要执行并行执行任务（比如同时做2个Ajax请求）。由于generator yield机制都是逐步暂停，无法在同时运行另一个或多个任务，他的任务必须一个一个的按顺序执行。因此，这不是太容易在一个generator中去操作多任务，我们只能默默的在背后手撸大量的代码。
一般我们请求ajax都会封装下

改写上面的模式，用promise修改下 getJson(..) ，让yield返回一个promise

	function getJson(url) {
	    //现在返回一个promise
	    return new Promise( function(resolve, reject) {
	        $.ajax(url, resolve);
	    });
	}
同时修改generator函数的iterator，它将接受到yield返回的那个promise，同时通过next(...)恢复generator运行，并把他们传递下去，这里新增 runGenerator(...) 方法来做这件事。
	
	funtion runGenerator(g) {
	    var it = g(), retl
	    
	    //遍历generator
	    (function iterate(val) {
	        //返回一个promise
	        ret = it.next(val);
	        
	        if(!ret.done) {
	            if('then' in ret.value) {
	                //等待接收promise
	                ret.value.then(iterate);
	            }
	            //获取立即就有的数据，不是promise了
	            else {
	                //避免同步操作
	                setTimeout(function() {
	                    iterate(ret.value);
	                }, 0);
	            }
	        }
	    })();
	}
> 1.自动初始化generator（直接创建它的iterator），并且异步递将他一直运行到结束（当done:true就不在执行）
> 
>2.如果Promise被返回出来，这时我们就等待到执行then(...)方法的时候再处理。
>
>3.如果是可以立即返回的数据，我们直接把数据返回给generator让他直接去执行下一步。

	runGenerator( function *main(){
	    var result1 = yield request( "http://some.url.1" );
	    var data = JSON.parse( result1 );
	
	    var result2 = yield request( "http://some.url.2?id=" + data.id );
	    var resp = JSON.parse( result2 );
	    console.log( "The value you asked for: " + resp.value );
	} );
现在的generator跟原先的完全一样。尽管改用了promise，但是yield方法不需要有什么变化，因为把那些逻辑都从我们的流程管理中分离出去了。

尽管现在的yield是返回一个promise了，并把这个promise传递给下一个it.next(..),但是result1 = yield request(..)这句得到的值跟以前还是一样的。这样就能很好解决掉所有使用回调函数方法中会出现的监听异常，多任务并行操作等问题。


***

ES7提供了async函数，使得异步操作变得更加方便。

相关链接

[异步操作和Async函数](http://es6.ruanyifeng.com/#docs/async)

[「大概可能也许是」目前最好的 JavaScript 异步方案 async/await](https://blog.leancloud.cn/3910/?utm_source=tuicool&utm_medium=referral)


